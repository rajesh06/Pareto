tail_wt <- data_frame(ptile = seq(from = 0.00, to = 0.99, by =.01)) %>%
dplyr::mutate(pareto_x = (1 - ptile)^(-1 / params$q))
tw_plot_y <- (tail_wt$pareto_x[2:100] - tail_wt$pareto_x[1:99]) /
tail_wt$pareto_x[1:99]
tw_plot_x <- tail_wt$ptile[1:99])
plot(x = tw_plot_x, y = tw_plot_y)
tail_wt$pareto_x[2:100]
tw_plot_x <- tail_wt$ptile[1:99]
plot(x = tw_plot_x, y = tw_plot_y)
install.packages("metrumrg")
tw_plot_y <- (tail_wt$pareto_x[2:100] / tail_wt$pareto_x[1:99])
tw_plot_x <- tail_wt$ptile[1:99]
plot(x = tw_plot_x, y = tw_plot_y)
params <- list(q = 1.5)
tail_wt <- data_frame(ptile = seq(from = 0.00, to = 0.99, by =.01)) %>%
dplyr::mutate(pareto_x = (1 - ptile)^(-1 / params$q))
tw_plot_y <- (tail_wt$pareto_x[2:100] - tail_wt$pareto_x[1:99]) /
(tail_wt$ptile[2:100] - tail_wt$ptile[1:99])
tw_plot_x <- tail_wt$ptile[1:99]
plot(x = tw_plot_x, y = tw_plot_y)
?plot
plot(xlim = c(0,1), ylim = c(90,110),   x = tw_plot_x, y = tw_plot_y, type = l)
plot(xlim = c(0,1), ylim = c(90,110),   x = tw_plot_x, y = tw_plot_y, type = 'l')
plot(xlim = c(0,1), ylim = c(0,110),   x = tw_plot_x, y = tw_plot_y, type = 'l')
install.packages("printr")
library(devtools)
install.packages(c("devtools", "withr"))
library(devtools)
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
library("knitr", lib.loc="~/R/win-library/3.3")
?kable
tail_wt_df <- data.frame(
= 1:100 / 100
)
library(magrittr)
no_points <- 100
pareto_q <- 1.5
set.seed(12345)
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (1 / no_points) / (
(1 - (2:100)/100) ^ (-1/pareto_q) - (1 - (1:99)/100) ^ (-1/pareto_q)
)
data_tw <- (1 / no_points) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
#data_x[1:(no_points - 1)]
plot(x = 1:99, y = data_tw, ylim = c(0,2))
lines(x = 1:99, y = model_tw, col = 'red')
points(x = 1:99, y = model_tw, col = 'red')
source('~/GitHub/Pareto/tail_wt_plot.R')
source('~/GitHub/Pareto/tail_wt_plot.R')
tail_wt_df <- data.frame(
= 1:100 / 100
)
library(magrittr)
no_points <- 1000
pareto_q <- 1.5
set.seed(12345)
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (1 / no_points) / (
(1 - (2:100)/100) ^ (-1/pareto_q) - (1 - (1:99)/100) ^ (-1/pareto_q)
)
data_tw <- (1 / no_points) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
#data_x[1:(no_points - 1)]
plot(x = 1:99, y = data_tw, ylim = c(0,2))
lines(x = 1:99, y = model_tw, col = 'red')
points(x = 1:99, y = model_tw, col = 'red')
tail_wt_df <- data.frame(
= 1:100 / 100
)
library(magrittr)
no_points <- 1000
pareto_q <- 1.5
set.seed(12345)
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (1 / no_points) / (
(1 - (2:100)/100) ^ (-1/pareto_q) - (1 - (1:99)/100) ^ (-1/pareto_q)
)
data_tw <- (1 / no_points) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
#data_x[1:(no_points - 1)]
plot(x = 1:99, y = data_tw, ylim = c(0,2))
lines(x = 1:99, y = model_tw, col = 'red')
points(x = 1:99, y = model_tw, col = 'red')
no_points <- 1000
pareto_q <- 1.5
set.seed(12345)
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / parero_q)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
model_x
no_points <- 1000
pareto_q <- 1.5
set.seed(12345)
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x, y = data_tw, ylim = c(0,2))
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2))
points(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
?lines
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2))
?lines
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
no_points <- 100
pareto_q <- 1.5
set.seed(12345)
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2))
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
no_points <- 100
pareto_q <- 1.1
set.seed(12345)
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', 'Data Point')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
no_points <- 100
pareto_q <- 1.1
set.seed(12345)
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Data Point')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
data_tw
model_tw
no_points <- 100
pareto_q <- 1.1
set.seed(12345)
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q + 0.3)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
no_points <- 100
pareto_q <- 1.1
set.seed(12345)
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q + 0.7)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
no_points <- 25
pareto_q <- 1.1
set.seed(12345)
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
dev.off()
dev.off()
no_points <- 25
pareto_qs <- c(1.1, 1.5, 2.0, 3.0)
set.seed(12345)
dev.off()
par(mfrom = c(2,2))
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
})
dev.off()
par(mfrow = c(2,2))
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
})
text(x = 1, y = 2, labels = paste('q = ', pareto_q))
?text
text(x = 1, y = 2, labels = paste('q = ', pareto_q), adj = 0)
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = 1, y = 2, labels = paste('q = ', pareto_q), adj = 0)
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = 1, y = 2, labels = paste('q = ', pareto_q), adj = 1)
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(y = 2, labels = paste('q = ', pareto_q))
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = , 1, y = 2, labels = paste('q = ', pareto_q))
})
dev.off()
par(mfrow = c(2,2))
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = , 1, y = 2, labels = paste('q = ', pareto_q))
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = , 1, y = 2, labels = paste('q = ', pareto_q), adj = c(0,0))
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = , 1, y = 2, labels = paste('q = ', pareto_q), adj = c(0,1))
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2.5),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = , 1, y = 2, labels = paste('q = ', pareto_q), adj = c(0,1))
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = , 1, y = 2, labels = paste('q = ', pareto_q), adj = c(0,1))
return(NULL)
})
lapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = mean(model_x[1:(no_points - 1)]), y = 2,
labels = paste('q = ', pareto_q), adj = c(0,1))
return(NULL)
})
sapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = mean(model_x[1:(no_points - 1)]), y = 2,
labels = paste('q = ', pareto_q), adj = c(0,1))
return(NULL)
})
dev.off()
par(mfrow = c(2,2))
sapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = mean(model_x[1:(no_points - 1)]), y = 2,
labels = paste('q = ', pareto_q), adj = c(0,1))
return(NULL)
})
?sapply
sapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = mean(model_x[1:(no_points - 1)]), y = 2,
labels = paste('q = ', pareto_q), adj = c(0,1))
return(NULL)
}, simplify = TRUE)
no_points <- 25
pareto_qs <- c(1.1, 1.5, 2.0, 3.0)
set.seed(12345)
dev.off()
par(mfrow = c(2,2))
sapply(X = pareto_qs, FUN = function(pareto_q){
# simulate via inversion
ptiles <- runif(n = no_points, min = 0, max = 1)
data_Fx <- sort(ptiles)
data_x <- (1 - data_Fx) ^ (-1 / pareto_q)
model_Fx <- seq(from = 0, to = 1, length.out = no_points)
model_x <- (1 - model_Fx) ^ (-1 / pareto_q)
data_tw <- (data_Fx[2:no_points] - data_Fx[1:(no_points - 1)]) /
(data_x[2:no_points] - data_x[1:(no_points - 1)])
model_tw <- (model_Fx[2:no_points] - model_Fx[1:(no_points - 1)]) /
(model_x[2:no_points] - model_x[1:(no_points - 1)])
plot(x = data_x[1:(no_points - 1)], y = data_tw, ylim = c(0,2),
ylab = 'Tail Weight', xlab = 'Normalized Claim Size')
lines(x = model_x[1:(no_points - 1)], y = model_tw, col = 'red')
text(x = mean(model_x[1:(no_points - 1)]), y = 2,
labels = paste('q = ', pareto_q, '( n = ', no_points, ')'), adj = c(0,1))
return(NULL)
}, simplify = TRUE)
